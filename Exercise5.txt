3.1 Verifying the Network


	ifconfig response for Original VM:

		eth13	Link encap:Ethernet  HWaddr 08:00:27:11:f5:29
			inet addr:10.0.2.4  Bcast:10.0.2.255  Mask:255.255.255.0
			inet6 addr: fe80::a00:27ff:fe11:f529/64 Scope:Link
			UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
			RX packets:317 errors:0 dropped:0 overruns:0 frame:0
			TX packets:323 errors:0 dropped:0 overruns:0 carrier:0
			collisions:0 txqueuelen:1000
			RX bytes:120231 (120.2 KB)  TX bytes:38097 (38.0 KB)

		lo	Link encap:Local Loopback
			inet addr:127.0.0.1  Mask:255.0.0.0
			inat6 addr: ::1/128 Scope:Host
			UP LOOPBACK RUNNING  MTU:16436  Metric:1
			RX packets:115 errors:0 dropped:0 overruns:0 frame:0
			TX packets:115 errors:0 dropped:0 overruns:0 carrier:0
			collisions:0 txqueuelen:0
			RX bytes:10662 (10.6 KB)  TX bytes:10662 (10.6 KB)


	ifconfig response for Cloned VM:

		eth14	Link encap:Ethernet  HWaddr 08:00:27:c7:92:2f
			inet addr:10.0.2.5  Bcast:10.0.2.255  Mask:255.255.255.0
			inet6 addr: fe80::a00:27ff:fec7:922f/64 Scope:Link
			UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
			RX packets:422 errors:0 dropped:0 overruns:0 frame:0
			TX packets:501 errors:0 dropped:0 overruns:0 carrier:0
			collisions:0 txqueuelen:1000
			RX bytes:173173 (173.1 KB)  TX bytes:59576 (59.5 KB)

		lo	Link encap:Local Loopback
			inet addr:127.0.0.1  Mask:255.0.0.0
			inet6 addr: ::1/128 Scope:Host
			UP LOOPBACK RUNNING  MTU:16436  Metric:1
			RX packets:128 errors:0 dropped:0 overruns:0 frame:0
			TX packets:128 errors:0 dropped:0 overruns:0 carrier:0
			collisions:0 txqueuelen:0
			RX bytes:12009 (12.0 KB)  TX bytes:12009 (12.0 KB)


	Ping response of Original VM to Cloned VM:

		PING 10.0.2.5 (10.0.2.5) 56(84) bytes of data.
		64 bytes from 10.0.2.5: icmp_req=1 ttl=64 time=0.422 ms
		64 bytes from 10.0.2.5: icmp_req=2 ttl=64 time=0.250 ms
		64 bytes from 10.0.2.5: icmp_req=3 ttl=64 time=0.240 ms
		64 bytes from 10.0.2.5: icmp_req=4 ttl=64 time=0.235 ms
		64 bytes from 10.0.2.5: icmp_req=5 ttl=64 time=0.249 ms

		--- 10.0.2.5 ping statistics ---
		5 packets transmitted, 5 received, 0% packet loss, time 3996 ms
		rtt min/avg/max/mdev = 0.235/0.279/0.422/0.072 ms

	
	Ping response of Cloned VM to Original VM:

		PING 10.0.2.4 (10.0.2.4) 56(84) bytes of data.
		64 bytes from 10.0.2.4: icmp_req=1 ttl=64 time=0.204 ms
		64 bytes from 10.0.2.4: icmp_req=2 ttl=64 time=0.259 ms
		64 bytes from 10.0.2.4: icmp_req=3 ttl=64 time=0.249 ms
		64 bytes from 10.0.2.4: icmp_req=4 ttl=64 time=0.333 ms
		64 bytes from 10.0.2.4: icmp_req=5 ttl=64 time=0.269 ms

		--- 10.0.2.4 ping statistics ---
		5 packets transmitted, 5 received, 0% packet loss, time 3999 ms
		rtt min/avg/max/mdev = 0.204/0.262/0.333/0.046 ms



3.2 Writing a Packet Sniffer

	pcap library summary:

		First the interface of the target has to be identified. The user can personally input the interface
		or allow pcap's internal mechanisms to determine one that can be used on the device. pcap is then
		initiallized with the name of the device or devices. Each instance of a connection to a device is
		a seperate session, and as such is given a name to differentiate it from the other possible
		sessions at one time. Filters on how packets are read, such as by port number, are fed to pcap by
		the user. They are fed as rulesets that pcap internally compiles and applies. pcap then either
		recieves the next packet, or recieves n number of packets from a loop, where n is determined by
		user or function, before exiting.


	sniffex packet sniffing result:

		sniffex - Sniffer example using libpcap
		Copyright (c) 2005 The Tcpdump Group
		THERE IS ABSOLUTELY NO WARRANTY FOR THIS PROGRAM.

		Device: eth13
		Number of packets: 10
		Filter expression: ip

		Packet number 1:
		       From: 10.0.2.5
		         To: 10.0.2.4
		   Protocol: ICMP

		Packet number 2:
		       From: 10.0.2.4
			 To: 10.0.2.5
		   Protocol: ICMP

		Packet number 3:
		       From: 10.0.2.4
			 To: 10.0.2.3
		   Protocol: UDP

		Packet number 4:
		       From: 10.0.2.3
			 To: 255.255.255.255
		   Protocol: UDP

		Packet number 5:
		       From: 10.0.2.5
			 To: 10.0.2.4
		   Protocol: ICMP

		Packet number 6:
		       From: 10.0.2.4
			 T0: 10.0.2.5
		   Protocol: ICMP

		Packet number 7:
		       From: 10.0.2.5
			 To: 10.0.2.4
		   Protocol: ICMP

		Packet number 8:
		       From: 10.0.2.4
			 To: 10.0.2.5
		   Protocol: ICMP

		Packet number 9:
		       From: 10.0.2.5
			 To: 10.0.2.4
		   Protocol: ICMP

		Packet number 10:
		       From: 10.0.2.4
			 To: 10.0.2.5
		   Protocol: ICMP

		Capture complete.


	sniffex packet sniffing result after filter has been modified to capture only TCP packets.

		sniffex - Sniffer example using libpcap
		Copyright (c) 2005 The Tcpdump Group
		THERE IS ABSOLUTELY NO WARRANTY FOR THIS PROGRAM.

		Device: eth13
		Number of packets: 10
		Filter expression: tcp

		Packet number 1:
		       From: 10.0.2.4
			 To: 162.213.33.48
		   Protocol: TCP
		   Src port: 34394
		   Dst port: 443

		Packet number 2:
		       From: 10.0.2.4
			 To: 162.213.33.48
		   Protocol: TCP
		   Src port: 34395
		   Dst port: 443

		Packet number 3:
		       From: 162.213.33.48
			 To: 10.0.2.4
		   Protocol: TCP
		   Src port: 443
		   Dst port: 34394

		Packet number 4:
		       From: 10.0.2.4
			 To: 162.213.33.48
		   Protocol: TCP
		   Src port: 34394
		   Dst port: 443

		Packet number 5:
		       From: 10.0.2.4
			 To: 162.213.33.48
		   Protocol: TCP
		   Src port: 34394
		   Dst port: 443
		   Payload (148 bytes):
		00000   16 03 00 00 8f 01 00 00  8b 03 03 59 06 ac 77 b9    ...........Y..w.
		00016	20 62 3b 24 5c 9b 73 ea  06 2b 7b 33 0a b1 64 91     b;$\.s..+{3..d.
		00032   76 b6 5c a8 5d 8d ab 2f  94 35 81 00 00 30 00 33    v.\.]../.5...0.3
		00048   00 67 00 45 00 39 00 6b  00 88 00 16 00 32 00 40    .g.E.9.k.....2.@
		00064   00 44 00 38 00 6a 00 87  00 13 00 66 00 2f 00 3c    .D.8.j.....f./.<
		00080   00 41 00 35 00 3d 00 84  00 0a 00 05 00 04 01 00    .A.5.=..........
		00096   00 32 00 00 00 1b 00 19  00 00 16 76 69 64 65 6f    .2.........video
		00112   73 65 61 72 63 68 2e 75  62 75 6e 74 75 2e 63 6f    search.ubuntu.co
		00128   6d ff 01 00 01 00 00 0d  00 0a 00 08 04 02 04 01    m...............
		00144   02 01 02 02					    ....

		Packet number 6:
		       From: 162.213.33.48
			 To: 10.0.2.4
		   Protocol: TCP
		   Src port: 443
		   Dst port: 34395

		Packet number 7:
		       From: 10.0.2.4
			 To: 162.213.33.48
		   Protocol: TCP
		   Src port: 34395
		   Dst port: 443

		Packet number 8:
		       From: 10.0.2.4
			 To: 162.213.33.48
		   Protocol: TCP
		   Src port: 34395
		   Dst port: 443
		   Payload (148 bytes):
		00000   16 03 00 00 8f 01 00 00  8b 03 03 59 06 ac 77 b9    ...........Y..w.
		00016   f4 ca 70 04 ab 3a d9 40  49 5c 1d b4 ea d2 3a d2    ..p..:.@I\....:.
		00032   15 ad 9d 54 8f 25 08 3f  cb 79 50 00 00 30 00 33    ...T.%.?.yP..0.3
		00048   00 67 00 45 00 39 00 6b  00 88 00 16 00 32 00 40    .g.E.9.k.....2.@
		00064   00 44 00 38 00 6a 00 87  00 13 00 66 00 2f 00 3c    .D.8.j.....f./.<
		00080   00 41 00 35 00 3d 00 84  00 0a 00 05 00 04 01 00    .A.5.=..........
		00096   00 32 00 00 00 1b 00 19  00 00 16 76 69 64 65 6f    .2.........video
		00112   73 65 61 72 63 68 2e 75  62 75 6e 74 75 2e 63 6f    search.ubuntu.co
		00128   6d ff 01 00 01 00 00 0d  00 0a 00 08 04 02 04 01    m...............
		00144   02 01 02 02					    ....

		Packet number 9:
		       From: 162.213.33.48
			 To: 10.0.2.4
		   Protocol: TCP
		   Src port: 443
		   Dst port: 34395

		Packet number 10:
		       From: 162.213.33.48
			 To: 10.0.2.4
		   Protocol: TCP
		   Src port: 443
		   Dst port: 34394

		Capture complete.


3.3 Password sniffing

	